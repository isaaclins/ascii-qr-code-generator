name: Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test QR Code Generator
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Download dependencies
        run: go mod tidy

      - name: Run basic tests
        shell: bash
        run: |
          echo "üß™ Running basic functionality tests..."

          # Test ASCII output (default)
          echo "Testing ASCII output..."
          go run main.go --text "Hello World!" > /dev/null
          echo "‚úÖ ASCII output test passed"

          # Test PNG output
          echo "Testing PNG output..."
          go run main.go --text "Test PNG" --format png --output test.png
          if [ -f test.png ]; then
            echo "‚úÖ PNG output test passed"
            rm test.png
          else
            echo "‚ùå PNG output test failed"
            exit 1
          fi

          # Test different sizes
          echo "Testing different sizes..."
          go run main.go --text "Size test" --format png --size 128 --output test-128.png
          go run main.go --text "Size test" --format png --size 512 --output test-512.png
          if [ -f test-128.png ] && [ -f test-512.png ]; then
            echo "‚úÖ Size test passed"
            rm test-128.png test-512.png
          else
            echo "‚ùå Size test failed"
            exit 1
          fi

          # Test error correction levels
          echo "Testing error correction levels..."
          for level in L M Q H; do
            go run main.go --text "EC test $level" --recovery $level --format png --output test-ec-$level.png
            if [ ! -f test-ec-$level.png ]; then
              echo "‚ùå Error correction level $level test failed"
              exit 1
            fi
            rm test-ec-$level.png
          done
          echo "‚úÖ Error correction levels test passed"

          # Test special characters
          echo "Testing special characters..."
          go run main.go --text "Special chars: @#$%^&*()" > /dev/null
          echo "‚úÖ Special characters test passed"

          # Test URL
          echo "Testing URL..."
          go run main.go --text "https://github.com" --format png --output test-url.png
          if [ -f test-url.png ]; then
            echo "‚úÖ URL test passed"
            rm test-url.png
          else
            echo "‚ùå URL test failed"
            exit 1
          fi

          # Test WiFi QR code
          echo "Testing WiFi QR code..."
          go run main.go --text "WIFI:T:WPA;S:TestNetwork;P:password123;;" --format png --output test-wifi.png
          if [ -f test-wifi.png ]; then
            echo "‚úÖ WiFi QR code test passed"
            rm test-wifi.png
          else
            echo "‚ùå WiFi QR code test failed"
            exit 1
          fi

          # Test error handling
          echo "Testing error handling..."
          error_output=$(go run main.go 2>&1 || true)
          if echo "$error_output" | grep -q "Error: --text flag is required"; then
            echo "‚úÖ Error handling test passed"
          else
            echo "‚ùå Error handling test failed"
            echo "Debug: Actual error output:"
            echo "$error_output"
            exit 1
          fi

          # Test help output
          echo "Testing help output..."
          if go run main.go --help > /dev/null 2>&1; then
            echo "‚úÖ Help output test passed"
          else
            echo "‚ùå Help output test failed"
            exit 1
          fi

          # Test backward compatibility
          echo "Testing backward compatibility..."
          go run main.go -text "Backward compatibility test" > /dev/null
          echo "‚úÖ Backward compatibility test passed"

      - name: Test cross-platform builds
        shell: bash
        run: |
          echo "üî® Testing cross-platform builds on ${{ matrix.os }}..."

          # Build for different platforms
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o qr-gen-linux main.go
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o qr-gen-windows.exe main.go
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o qr-gen-darwin main.go
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o qr-gen-darwin-arm64 main.go

          echo "‚úÖ Cross-platform builds completed"

          # Test the native binary for current platform
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            echo "Testing native Linux binary..."
            ./qr-gen-linux --text "Linux test" --format text > /dev/null
            echo "‚úÖ Linux binary test passed"
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "Testing native macOS binary..."
            ./qr-gen-darwin --text "macOS test" --format text > /dev/null
            echo "‚úÖ macOS binary test passed"
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "Testing native Windows binary..."
            ./qr-gen-windows.exe --text "Windows test" --format text > /dev/null
            echo "‚úÖ Windows binary test passed"
          fi

          # Verify all binaries exist and have correct sizes
          echo "Verifying binary files..."
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            dir qr-gen-*
          else
            ls -la qr-gen-*
          fi

          # Check that all binaries were created and have reasonable sizes (> 1MB)
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows PowerShell commands
            powershell -Command '
              $binaries = @("qr-gen-linux", "qr-gen-windows.exe", "qr-gen-darwin", "qr-gen-darwin-arm64")
              foreach ($binary in $binaries) {
                if (Test-Path $binary) {
                  $size = (Get-Item $binary).Length
                  if ($size -gt 1000000) {
                    Write-Host "‚úÖ $binary created successfully ($size bytes)"
                  } else {
                    Write-Host "‚ùå $binary failed to create or is too small"
                    exit 1
                  }
                } else {
                  Write-Host "‚ùå $binary not found"
                  exit 1
                }
              }
            '
          else
            # Unix commands (Linux and macOS)
            for binary in qr-gen-linux qr-gen-windows.exe qr-gen-darwin qr-gen-darwin-arm64; do
              if [ -f "$binary" ]; then
                # Use different stat command based on OS
                if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
                  size=$(stat -f%z "$binary")
                else
                  size=$(stat -c%s "$binary")
                fi
                
                if [ "$size" -gt 1000000 ]; then
                  echo "‚úÖ $binary created successfully ($size bytes)"
                else
                  echo "‚ùå $binary failed to create or is too small ($size bytes)"
                  exit 1
                fi
              else
                echo "‚ùå $binary not found"
                exit 1
              fi
            done
          fi

          echo "‚úÖ Cross-platform build tests passed on ${{ matrix.os }}"

      - name: Run comprehensive test script
        shell: bash
        run: |
          echo "üß™ Running comprehensive test script..."
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # On Windows, run the test commands directly using PowerShell
            powershell -Command '
              Write-Host "Testing ASCII output..."
              go run main.go --text "Hello World!" | Out-Null
              Write-Host "‚úÖ ASCII output test passed"
              
              Write-Host "Testing PNG output..."
              go run main.go --text "Test PNG" --format png --output test.png
              if (Test-Path test.png) {
                Write-Host "‚úÖ PNG output test passed"
                Remove-Item test.png
              } else {
                Write-Host "‚ùå PNG output test failed"
                exit 1
              }
              
              Write-Host "Testing error handling..."
              try {
                $output = go run main.go 2>&1
                if ($output -match "Error: --text flag is required") {
                  Write-Host "‚úÖ Error handling test passed"
                } else {
                  Write-Host "‚ùå Error handling test failed"
                  Write-Host "Debug: Actual error output:"
                  Write-Host $output
                  exit 1
                }
              } catch {
                $output = $_.Exception.Message
                if ($output -match "Error: --text flag is required") {
                  Write-Host "‚úÖ Error handling test passed"
                } else {
                  Write-Host "‚ùå Error handling test failed"
                  Write-Host "Debug: Actual error output:"
                  Write-Host $output
                  exit 1
                }
              }
              
              Write-Host "‚úÖ Windows comprehensive test script passed"
            '
          else
            # On Unix systems, run the test script
            chmod +x test.sh
            ./test.sh
            echo "‚úÖ Comprehensive test script passed"
          fi

      - name: Test file permissions
        shell: bash
        run: |
          echo "üîê Testing file permissions..."
          go build -ldflags="-s -w" -o qr-gen main.go

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # On Windows, test execution directly
            powershell -Command "
              Write-Host 'Testing binary execution...'
              .\qr-gen --text 'Permission test' | Out-Null
              Write-Host '‚úÖ Permission test passed'
            "
          else
            # On Unix systems, test permissions
            chmod +x qr-gen

            # Test that the binary is executable
            if [ -x qr-gen ]; then
              echo "‚úÖ Binary is executable"
            else
              echo "‚ùå Binary is not executable"
              exit 1
            fi

            # Test execution
            ./qr-gen --text "Permission test" > /dev/null
            echo "‚úÖ Permission test passed"
          fi

      - name: Test output formats
        shell: bash
        run: |
          echo "üìÑ Testing output formats..."

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows PowerShell commands
            powershell -Command "
              Write-Host 'Testing text output to file...'
              go run main.go --text 'File output test' --output test-output.txt
              if (Test-Path test-output.txt) {
                Write-Host '‚úÖ Text file output test passed'
                Remove-Item test-output.txt
              } else {
                Write-Host '‚ùå Text file output test failed'
                exit 1
              }
              
              Write-Host 'Testing PNG output with custom name...'
              go run main.go --text 'Custom PNG test' --format png --output custom-test.png
              if (Test-Path custom-test.png) {
                Write-Host '‚úÖ Custom PNG output test passed'
                Remove-Item custom-test.png
              } else {
                Write-Host '‚ùå Custom PNG output test failed'
                exit 1
              }
            "
          else
            # Unix commands
            # Test text output to file
            go run main.go --text "File output test" --output test-output.txt
            if [ -f test-output.txt ]; then
              echo "‚úÖ Text file output test passed"
              rm test-output.txt
            else
              echo "‚ùå Text file output test failed"
              exit 1
            fi

            # Test PNG output with custom name
            go run main.go --text "Custom PNG test" --format png --output custom-test.png
            if [ -f custom-test.png ]; then
              echo "‚úÖ Custom PNG output test passed"
              rm custom-test.png
            else
              echo "‚ùå Custom PNG output test failed"
              exit 1
            fi
          fi

      - name: Performance test
        shell: bash
        run: |
          echo "‚ö° Running performance test..."

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows PowerShell commands
            powershell -Command '
              $longText = @"
                This is a very long text string that will test the QR code generator's ability to handle larger inputs and create more complex QR codes. 
                It includes various characters and symbols: @#$%^&*()_+-=[]{}|;':`",./<>? and numbers 1234567890
                "@
                
              $startTime = Get-Date
              go run main.go --text "$longText" --format png --output performance-test.png
              $endTime = Get-Date
              
              $duration = ($endTime - $startTime).TotalMilliseconds
              Write-Host "Performance test completed in" $duration "ms"
              
              if (Test-Path performance-test.png) {
                Write-Host "‚úÖ Performance test passed"
                Remove-Item performance-test.png
                exit 0 # Powershell does not return 0 automatically... smh
              } else {
                Write-Host "‚ùå Performance test failed"
                exit 1
              }
            '
          else
            # Unix commands
            # Test with a longer string (use heredoc to avoid shell parsing issues)
            long_text=$(cat <<'EOF'
This is a very long text string that will test the QR code generator's ability to handle larger inputs and create more complex QR codes. It includes various characters and symbols: @#$%^&*()_+-=[]{}|;':",./<>? and numbers 1234567890
EOF
)

            start_time=$(date +%s%N)
            go run main.go --text "$long_text" --format png --output performance-test.png
            end_time=$(date +%s%N)

            duration=$(( (end_time - start_time) / 1000000 ))
            echo "Performance test completed in ${duration}ms"

            if [ -f performance-test.png ]; then
              echo "‚úÖ Performance test passed"
              rm performance-test.png
            else
              echo "‚ùå Performance test failed"
              exit 1
            fi
          fi

      - name: Cleanup
        if: always()
        shell: bash
        run: |
          echo "üßπ Cleaning up test files..."
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows PowerShell cleanup
            powershell -Command "
              Remove-Item -Path test*.png, test*.txt, qr-gen-*, qr-gen -ErrorAction SilentlyContinue
              Write-Host '‚úÖ Cleanup completed'
            "
          else
            # Unix cleanup
            rm -f test*.png test*.txt qr-gen-* qr-gen
            echo "‚úÖ Cleanup completed"
          fi

      - name: Test Summary
        shell: bash
        run: |
          echo "üéâ All tests completed successfully!"
          echo "‚úÖ Basic functionality tests passed"
          echo "‚úÖ Cross-platform build tests passed"
          echo "‚úÖ Comprehensive test script passed"
          echo "‚úÖ File permission tests passed"
          echo "‚úÖ Output format tests passed"
          echo "‚úÖ Performance tests passed"
          echo ""
          echo "The QR Code Generator is ready for release! üöÄ"
